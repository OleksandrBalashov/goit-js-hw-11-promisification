{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,KACTA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAAIA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAEvG,OAAO,IAAIhB,SAAQ,SAACC,GACjBA,EAAQa,OAIPX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAE7CH,EAAgBH,EAAO,SAAiBD,KAAKJ,GAC7CQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAIMe,EAAkB,SAACC,GACrB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAEzB,IAP2BC,EAAKC,EAO1BxB,GAPqBuB,EAOa,IAPRC,EAOa,IAN5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOtCK,EAAOP,EAAPO,GAERxB,YAAW,WACYqB,KAAKE,SAAW,IAEnBxB,EAAQ,CAAEyB,KAAI5B,UAE9BsB,EAAOD,EAAYO,MACpB5B,OAIL6B,EAAa,SAACD,EAAItB,GACtBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7BvB,MAAK,gBAAGmB,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,MAAP,OAAmB6B,EAAWD,EAAI5B,MACvCiC,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7BvB,MAAK,gBAAGmB,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,MAAP,OAAmB6B,EAAWD,EAAI5B,MACvCiC,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC7BvB,MAAK,gBAAGmB,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,MAAP,OAAmB6B,EAAWD,EAAI5B,MACvCiC,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7BvB,MAAK,gBAAGmB,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,MAAP,OAAmB6B,EAAWD,EAAI5B,MACvCiC,MAAMH,K","file":"main.76b8be16b8f0fbc438ac.js","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms)         \n        }, ms)\n    })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user);\n \n  return new Promise((resolve) => {\n     resolve(updatedUsers)\n   }) \n}\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango', logger).then(logger)\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        \n        const delay = randomIntegerFromInterval(200, 500); \n        const { id } = transaction;\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) resolve({ id, delay })\n            \n            reject(transaction.id)  \n        }, delay);\n    })\n}\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(({ id, delay }) => logSuccess(id, delay))\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(({ id, delay }) => logSuccess(id, delay))\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(({ id, delay }) => logSuccess(id, delay))\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(({ id, delay }) => logSuccess(id, delay))\n    .catch(logError);\n\n"],"sourceRoot":""}